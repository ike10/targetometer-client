{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\targetometer-client-main\\\\context\\\\TaskContext.js\";\nimport { createContext, useContext, useState } from \"react\";\nimport { GiToken } from \"react-icons/gi\";\nimport { useAuth } from \"./AuthContext\";\nconst TaskContextDefaultValues = /*#__PURE__*/createContext({\n  tasks: [],\n  singleTask: []\n});\nconst TaskContext = /*#__PURE__*/createContext(TaskContextDefaultValues);\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/users';\nexport function useTask() {\n  return useContext(TaskContext);\n}\nexport const TaskProvider = ({\n  children\n}) => {\n  const {\n    user\n  } = useAuth();\n  const {\n    0: tasks,\n    1: setTask\n  } = useState([]);\n  const {\n    0: singleTask,\n    1: setSingleTask\n  } = useState([]);\n  const {\n    0: taskServerMessage,\n    1: settaskServerMessage\n  } = useState('');\n\n  const get_all_tasks = () => {\n    const userID = localStorage.getItem('userID');\n    const token = localStorage.getItem('token');\n    const projectID = localStorage.getItem('selectedProjectID');\n    console.log(`${BASE_URL}/${userID}/projects/${projectID}/tasks`);\n    fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks`, {\n      method: 'GET',\n      headers: {\n        // 'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      }\n    }).then(response => response.json()).then(result => {\n      console.log(result.result);\n      setTask([...result.result]);\n      localStorage.setItem('taskInfo', JSON.stringify(result.result));\n    }).catch(error => {\n      settaskServerMessage(error.message);\n    });\n  };\n\n  const get_single_task = taskID => {\n    const projectID = localStorage.getItem('selectedProjectID');\n    const userID = localStorage.getItem('userID');\n    const token = localStorage.getItem('token');\n    fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/${taskID}`, {\n      method: 'GET',\n      headers: {\n        // 'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      }\n    }).then(response => response.json()).then(result => {\n      console.log(result);\n      localStorage.setItem('tasks', JSON.stringify(result.result));\n      setTask([...result.result]);\n    }).catch(error => {\n      settaskServerMessage(error.message);\n    });\n  };\n\n  const create_single_task = (title, description, startdate, enddate) => {\n    const token = localStorage.getItem('token');\n    const projectID = localStorage.getItem('selectedProjectID');\n    const userID = localStorage.getItem('userID');\n    fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify({\n        title: title,\n        description: description,\n        startdate: startdate,\n        enddate: enddate\n      })\n    }).then(() => {\n      settaskServerMessage(\"Task Created Successfully\");\n      location.reload(true);\n    }).catch(error => {\n      settaskServerMessage(error.message);\n    });\n  };\n\n  const set_task_to_working = taskID => {\n    const token = localStorage.getItem('token');\n    const userID = localStorage.getItem('userID');\n    const projectID = localStorage.getItem('selectedProjectID');\n    fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/${taskID}/working`, {\n      method: 'PUT',\n      // mode: \"no-cors\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify({})\n    }).then(response => response.json()).then(result => {\n      console.log(result.message);\n      location.reload(true);\n    }).catch(error => {\n      console.log(error.message);\n    });\n  };\n\n  const set_task_to_completed = taskID => {\n    const token = localStorage.getItem('token');\n    const userID = localStorage.getItem('userID');\n    const projectID = localStorage.getItem('selectedProjectID');\n    fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/${taskID}/completed`, {\n      method: 'PUT',\n      // mode: \"no-cors\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify({})\n    }).then(response => response.json()).then(result => {\n      console.log(result.message);\n      location.reload(true);\n    }).catch(error => {\n      console.log(error.message);\n    });\n  };\n\n  const value = {\n    tasks,\n    singleTask,\n    taskServerMessage,\n    get_all_tasks,\n    get_single_task,\n    create_single_task,\n    set_task_to_completed,\n    set_task_to_working,\n    settaskServerMessage\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n};\nexport default TaskContext;","map":{"version":3,"sources":["C:/Users/USER/Desktop/targetometer-client-main/context/TaskContext.js"],"names":["createContext","useContext","useState","GiToken","useAuth","TaskContextDefaultValues","tasks","singleTask","TaskContext","BASE_URL","useTask","TaskProvider","children","user","setTask","setSingleTask","taskServerMessage","settaskServerMessage","get_all_tasks","userID","localStorage","getItem","token","projectID","console","log","fetch","method","headers","then","response","json","result","setItem","JSON","stringify","catch","error","message","get_single_task","taskID","create_single_task","title","description","startdate","enddate","body","location","reload","set_task_to_working","set_task_to_completed","value"],"mappings":"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","sourcesContent":["\nimport {  createContext, useContext, useState } from \"react\";\nimport { GiToken } from \"react-icons/gi\";\nimport { useAuth } from \"./AuthContext\";\n\nconst TaskContextDefaultValues = createContext({\n    tasks: [],\n    singleTask: [],\n   \n})\n\nconst TaskContext = createContext(TaskContextDefaultValues)\n\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/users'\n\nexport function useTask(){\n    return useContext(TaskContext)\n}\n\nexport const TaskProvider = ({children}) =>{\n    const {user} = useAuth()\n    const [tasks, setTask] = useState([])\n    const [singleTask, setSingleTask] = useState([])\n    const [taskServerMessage, settaskServerMessage] = useState('')\n\n    const get_all_tasks = () =>{\n        const userID = localStorage.getItem('userID')\n        const token = localStorage.getItem('token')\n        const projectID = localStorage.getItem('selectedProjectID')\n        console.log(`${BASE_URL}/${userID}/projects/${projectID}/tasks` )\n        fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks`, {\n            method: 'GET',\n            headers: {\n                // 'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n               // 'Content-Type': 'application/x-www-form-urlencoded',\n              }\n        })\n        .then(response=>response.json())\n        .then(result => {\n            console.log(result.result)\n            setTask([...result.result])\n            localStorage.setItem('taskInfo',JSON.stringify(result.result) )\n        })\n        .catch(error => {\n            settaskServerMessage(error.message)\n        })\n    }\n\n    const get_single_task =( taskID)=>{\n        const projectID = localStorage.getItem('selectedProjectID')\n        const userID = localStorage.getItem('userID')\n        const token = localStorage.getItem('token')\n       fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/${taskID}`, {\n            method: 'GET',\n            headers: {\n                // 'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n               // 'Content-Type': 'application/x-www-form-urlencoded',\n              }\n        })\n        .then((response)=>response.json())\n        .then(result => {\n            console.log(result)\n            localStorage.setItem('tasks',JSON.stringify(result.result))\n            setTask([...result.result])\n       })\n        .catch(error => {\n            settaskServerMessage(error.message)\n        })\n    }\n\n    const create_single_task = ( title, description, startdate, enddate) =>{\n        const token = localStorage.getItem('token')\n        const projectID = localStorage.getItem('selectedProjectID')\n        const userID = localStorage.getItem('userID')\n     \n        fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n             },\n            body: JSON.stringify({\n                \n                title: title,\n                description:description, \n                startdate: startdate,\n                enddate: enddate\n            })\n        })\n        .then(()=>{\n            \n           settaskServerMessage(\"Task Created Successfully\")\n            location.reload(true);\n        })\n        .catch(error => {\n            settaskServerMessage(error.message)\n        })\n    }\n\n    const set_task_to_working =(taskID)=>{\n        const token = localStorage.getItem('token')\n        const userID = localStorage.getItem('userID')\n        const projectID = localStorage.getItem('selectedProjectID')\n        fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/${taskID}/working`, {\n            method: 'PUT',\n            // mode: \"no-cors\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },\n            body: JSON.stringify({\n                \n               \n            })\n        })\n        .then(response => response.json())\n        .then((result)=>{\n            console.log(result.message)\n            location.reload(true);\n        })\n        .catch(error => {\n            console.log(error.message)\n        })\n    }\n\n    const set_task_to_completed = (taskID) => {\n        const token = localStorage.getItem('token')\n        const userID = localStorage.getItem('userID')\n        const projectID = localStorage.getItem('selectedProjectID')\n        fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/${taskID}/completed`, {\n            method: 'PUT',\n            // mode: \"no-cors\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },\n            body: JSON.stringify({\n                \n              \n            })\n        })\n        .then(response => response.json())\n        .then((result)=>{\n            console.log(result.message)\n         \n            location.reload(true);\n        })\n        .catch(error => {\n            console.log(error.message)\n        })\n    }\n\n    const value = {\n        tasks,\n        singleTask,\n        taskServerMessage,\n        get_all_tasks,\n        get_single_task,\n        create_single_task,\n        set_task_to_completed,\n        set_task_to_working,\n        settaskServerMessage\n    }\n\n    return (\n        <TaskContext.Provider value={value}>\n            {children}\n        </TaskContext.Provider>\n    )\n}\n\nexport default TaskContext"]},"metadata":{},"sourceType":"module"}