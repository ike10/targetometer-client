{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/oche/Projects/Targetometer/Client/context/AuthContext.js\";\nimport { createContext, useContext, useState } from \"react\";\nimport router, { useRouter } from 'next/router';\nimport axios from \"axios\";\nconst AuthContextDefaultValues = {\n  user: []\n};\nconst AuthContext = /*#__PURE__*/createContext(AuthContextDefaultValues);\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/auth';\nexport function useAuth() {\n  return useContext(AuthContext);\n}\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState([]); // const [single_route, setSingle_route] = useState([])\n\n  const {\n    0: serverMessage,\n    1: setServerMessage\n  } = useState('');\n\n  const sign_up = async (email, password, firstname, lastname, confirmpassword) => {\n    try {\n      const response = await fetch(`${BASE_URL}/createaccount`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        body: JSON.stringify({\n          firstname: firstname,\n          password: password,\n          email: email,\n          confirmpassword: confirmpassword\n        })\n      });\n      const result = response.json();\n      setServerMessage(result.message);\n    } catch (err) {\n      setServerMessage(err.message);\n    }\n  };\n\n  const sign_in = async (email, password) => {\n    try {\n      const response = await fetch(`${BASE_URL}/createaccount`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        body: JSON.stringify({\n          password: password,\n          email: email\n        })\n      });\n      const result = response.json();\n      await localStorage.setItem('token', result.data.token);\n      await localStorage.setItem('user', result.data.user);\n      setServerMessage(result.data.message);\n    } catch (err) {\n      setServerMessage(err.message);\n    }\n\n    router.push(`/:${user.name}`);\n  }; // const get_single_route = (routeId) =>{\n  //     console.log(routeId)\n  //     let url = `https://backend.cruise9ja.com/api/v1/routes/${abuwala1}`\n  //     fetch(url)\n  //       .then(response => response.json())\n  //       .then(data => {\n  //           console.log(data)\n  //           setSingle_route([...data.result])\n  //           console.log(single_route)\n  //       })\n  //       .catch(err => {\n  //           setErrorMessage(err.message)\n  //         })\n  //     // const router = useRouter()\n  //     // router.push('/searchresults')\n  // }\n\n\n  const value = {\n    user,\n    sign_in,\n    sign_up,\n    serverMessage\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["/Users/oche/Projects/Targetometer/Client/context/AuthContext.js"],"names":["createContext","useContext","useState","router","useRouter","axios","AuthContextDefaultValues","user","AuthContext","BASE_URL","useAuth","AuthProvider","children","setUser","serverMessage","setServerMessage","sign_up","email","password","firstname","lastname","confirmpassword","response","fetch","method","headers","body","JSON","stringify","result","json","message","err","sign_in","localStorage","setItem","data","token","push","name","value"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport router, {useRouter} from 'next/router'\nimport axios from \"axios\";\nconst AuthContextDefaultValues={\n    user:[],\n    \n}\n\nconst AuthContext = createContext(AuthContextDefaultValues)\n\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/auth'\nexport function useAuth(){\n    return useContext(AuthContext)\n}\n\nexport function AuthProvider({children}){\n    const [user, setUser] = useState([])\n    // const [single_route, setSingle_route] = useState([])\n    const [serverMessage, setServerMessage] = useState('')\n    const sign_up = async (email, password, firstname, lastname, confirmpassword) =>{\n        try{\n            const response = await fetch(`${BASE_URL}/createaccount`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                  },\n                body: JSON.stringify({\n                    firstname: firstname,\n                    password: password,\n                    email:email, \n                    confirmpassword: confirmpassword\n                })\n            })\n            const result = response.json()\n            setServerMessage(result.message)\n            \n          }catch(err){\n            setServerMessage(err.message)\n          }\n    }\n    const sign_in = async(email, password) =>{\n        try{\n            const response = await fetch(`${BASE_URL}/createaccount`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                  },\n                body: JSON.stringify({\n                    \n                    password: password,\n                    email:email, \n                    \n                })\n            })\n            const result = response.json()\n            await localStorage.setItem('token', result.data.token)\n            await localStorage.setItem('user', result.data.user)\n            setServerMessage(result.data.message)\n            \n          }catch(err){\n            setServerMessage(err.message)\n          }\n          router.push(`/:${user.name}`)\n    }\n\n    // const get_single_route = (routeId) =>{\n\n    //     console.log(routeId)\n\n    //     let url = `https://backend.cruise9ja.com/api/v1/routes/${abuwala1}`\n    //     fetch(url)\n    //       .then(response => response.json())\n    //       .then(data => {\n    //           console.log(data)\n    //           setSingle_route([...data.result])\n    //           console.log(single_route)\n    //       })\n    //       .catch(err => {\n    //           setErrorMessage(err.message)\n              \n    //         })\n    //     // const router = useRouter()\n    //     // router.push('/searchresults')\n    // }\n\n    const value = {\n        user,\n        sign_in,\n        sign_up,\n        serverMessage\n    }\n\n    return (\n        <>\n            <AuthContext.Provider value={value}>\n                {children}\n            </AuthContext.Provider>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}