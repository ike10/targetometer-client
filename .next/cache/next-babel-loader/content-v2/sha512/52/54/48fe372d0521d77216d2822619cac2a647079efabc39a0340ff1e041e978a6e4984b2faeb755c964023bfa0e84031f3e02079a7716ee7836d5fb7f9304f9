{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/oche/Projects/Targetometer/Client/context/ProjectContext.js\";\nimport { createContext, useContext, useState } from \"react\";\nimport { GiToken } from \"react-icons/gi\";\nimport { useAuth } from \"./AuthContext\";\nconst ProjectContextDefaultValues = /*#__PURE__*/createContext({\n  projects: [],\n  singleproject: []\n});\nconst {\n  user\n} = useAuth();\nconst ProjectContext = /*#__PURE__*/createContext(ProjectContextDefaultValues);\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/users';\nexport function useProject() {\n  return useContext(ProjectContext);\n}\nexport const ProjectProvider = ({\n  children\n}) => {\n  const {\n    0: project,\n    1: setProject\n  } = useState([]);\n  const {\n    0: singleproject,\n    1: setSingleProject\n  } = useState([]);\n  const {\n    0: serverMessage,\n    1: setServerMessage\n  } = useState('');\n\n  const get_all_projects = () => {\n    fetch(`${BASE_URL}/${user.userID}/projects`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer' + token // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      }\n    }).then(response => {\n      response.json();\n    }).then(result => {\n      console.log(result);\n      setProject(...result.data);\n    }).catch(error => {\n      setServerMessage(error.message);\n    });\n  };\n\n  const get_single_project = projectID => {\n    alert(projectID);\n  };\n\n  const create_single_project = (title, description, startdate, enddate) => {\n    const token = localStorage.getItem('token');\n    fetch(`${BASE_URL}/${user.userID}/projects`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer' + token // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify({\n        title: title,\n        description: description,\n        startdate: startdate,\n        enddate: enddate\n      })\n    }).then(() => {\n      setServerMessage(\"Project Created Succedfully\");\n    }).catch(error => {\n      setServerMessage(error.message);\n    });\n  };\n\n  const value = {\n    project,\n    singleproject,\n    serverMessage,\n    get_all_projects,\n    get_single_project,\n    create_single_project\n  };\n  return /*#__PURE__*/_jsxDEV(ProjectContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\nexport default ProjectContext;","map":{"version":3,"sources":["/Users/oche/Projects/Targetometer/Client/context/ProjectContext.js"],"names":["createContext","useContext","useState","GiToken","useAuth","ProjectContextDefaultValues","projects","singleproject","user","ProjectContext","BASE_URL","useProject","ProjectProvider","children","project","setProject","setSingleProject","serverMessage","setServerMessage","get_all_projects","fetch","userID","method","headers","token","then","response","json","result","console","log","data","catch","error","message","get_single_project","projectID","alert","create_single_project","title","description","startdate","enddate","localStorage","getItem","body","JSON","stringify","value"],"mappings":"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","sourcesContent":["import {  createContext, useContext, useState } from \"react\";\nimport { GiToken } from \"react-icons/gi\";\nimport { useAuth } from \"./AuthContext\";\n\nconst ProjectContextDefaultValues = createContext({\n    projects: [],\n    singleproject: [],\n   \n})\nconst {user} = useAuth()\nconst ProjectContext = createContext(ProjectContextDefaultValues)\n\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/users'\n\nexport function useProject(){\n    return useContext(ProjectContext)\n}\n\nexport const ProjectProvider = ({children}) =>{\n    const [project, setProject] = useState([])\n    const [singleproject, setSingleProject] = useState([])\n    const [serverMessage, setServerMessage] = useState('')\n\n    const get_all_projects = () =>{\n        fetch(`${BASE_URL}/${user.userID}/projects`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer'  + token,\n               // 'Content-Type': 'application/x-www-form-urlencoded',\n              }\n        })\n        .then((response)=>{response.json()})\n        .then(result => {\n            console.log(result)\n            setProject(...result.data)\n        })\n        .catch(error => {\n            setServerMessage(error.message)\n        })\n    }\n\n    const get_single_project =(projectID)=>{\n        alert(projectID)\n    }\n\n    const create_single_project = (title, description, startdate, enddate) =>{\n        const token = localStorage.getItem('token')\n        \n        fetch(`${BASE_URL}/${user.userID}/projects`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer'  + token,\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },\n            body: JSON.stringify({\n                \n                title: title,\n                description:description, \n                startdate: startdate,\n                enddate: enddate\n            })\n        })\n        .then(()=>{\n            setServerMessage(\"Project Created Succedfully\")\n        })\n        .catch(error => {\n            setServerMessage(error.message)\n        })\n    }\n\n    const value = {\n        project,\n        singleproject,\n        serverMessage,\n        get_all_projects,\n        get_single_project,\n        create_single_project\n    }\n\n    return (\n        <ProjectContext.Provider value={value}>\n            {children}\n        </ProjectContext.Provider>\n    )\n}\n\nexport default ProjectContext"]},"metadata":{},"sourceType":"module"}