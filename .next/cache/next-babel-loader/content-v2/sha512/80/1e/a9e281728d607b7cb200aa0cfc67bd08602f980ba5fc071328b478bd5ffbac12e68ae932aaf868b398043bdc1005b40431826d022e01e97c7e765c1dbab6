{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/oche/Projects/Targetometer/Client/context/AuthContext.js\";\nimport { createContext, useContext, useState } from \"react\";\nimport router, { useRouter } from 'next/router';\nimport axios from \"axios\";\nconst AuthContextDefaultValues = {\n  user: []\n};\nconst AuthContext = /*#__PURE__*/createContext(AuthContextDefaultValues);\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/auth';\nexport function useAuth() {\n  return useContext(AuthContext);\n}\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState([]);\n  const {\n    0: userInfo,\n    1: setUserInfo\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false); // const [single_route, setSingle_route] = useState([])\n\n  const {\n    0: serverMessage,\n    1: setServerMessage\n  } = useState('');\n\n  const sign_up = async (email, password, firstname, lastname, confirmpassword) => {\n    if (password === confirmpassword) {\n      try {\n        setIsLoading(true);\n        let response = await fetch(`${BASE_URL}/createaccount`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n          },\n          body: JSON.stringify({\n            firstname: firstname,\n            lastname: lastname,\n            password: password,\n            email: email\n          })\n        });\n        const result = await response.json(); // console.log(result)\n\n        setServerMessage(\"Account Created Successfully, please verify email\");\n        setTimeout(() => {\n          router.push(`/verifyuser`);\n        }, 30000);\n        setIsLoading(false);\n      } catch (err) {\n        setServerMessage(err.message);\n        setIsLoading(false);\n      }\n    } else {\n      setServerMessage('password and confirm password does not match');\n    } //     fetch(`${BASE_URL}/createaccount`, {\n    //         method: 'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json'\n    //             // 'Content-Type': 'application/x-www-form-urlencoded',\n    //           },\n    //         body: JSON.stringify({\n    //             firstname: firstname,\n    //             lastname: lastname,\n    //             password: password,\n    //             email:email, \n    //         })\n    //     })\n    //     .then(response => response.json())\n    //     .then(data => {\n    //     setServerMessage(\"Account Created Successfully, please login to access dashboard\")\n    //     setTimeout(()=>{\n    //         router.push(`/`)\n    //     }, 30000)\n    //    })\n    //     .catch(err=>{\n    //         setServerMessage(err.message)\n    //     })\n\n  }; // verify account\n\n\n  const verify_user = async otp => {\n    try {\n      setIsLoading(true);\n      let response = await fetch(`${BASE_URL}/verifyaccount`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        body: JSON.stringify({\n          token: otp\n        })\n      });\n      const result = await response.json();\n      setServerMessage('Email Verified Please Login');\n      setTimeout(() => {\n        router.push(`/`);\n      }, 30000);\n      setIsLoading(false);\n    } catch (error) {\n      setServerMessage(\"Error verifiying token\");\n      setIsLoading(false);\n      router.push(`/`);\n    }\n  };\n\n  const sign_in = async (email, password) => {\n    try {\n      setIsLoading(true);\n      let response = await fetch(`${BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        body: JSON.stringify({\n          password: password,\n          email: email\n        })\n      });\n      const result = await response.json(); // console.log(result)\n\n      localStorage.setItem('token', result.token);\n      setUser(result.data);\n      localStorage.setItem('firstname', result.data.firstname);\n      localStorage.setItem('lastname', result.data.lastname);\n      localStorage.setItem('userID', result.data.userID);\n      const firstname = localStorage.getItem('firstname');\n      const lastname = localStorage.getItem('lastname');\n      setServerMessage(result.message);\n      router.push(`/${firstname}_${lastname}`);\n    } catch (err) {\n      setServerMessage(err.message);\n      setIsLoading(false);\n    } // fetch(`${BASE_URL}/login`, {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json'\n    //         // 'Content-Type': 'application/x-www-form-urlencoded',\n    //       },\n    //     body: JSON.stringify({\n    //         password: password,\n    //         email:email, \n    //     })\n    // })\n    //     .then(response => response.json())\n    //     .then(result => {\n    //      localStorage.setItem('token', result.token)\n    //     setUser(result.data)\n    //     localStorage.setItem('firstname', result.data.firstname )\n    //     localStorage.setItem('lastname',result.data.lastname)\n    //     localStorage.setItem('userID', result.data.userID)\n    //     const firstname = localStorage.getItem('firstname')\n    //     const lastname = localStorage.getItem('lastname')\n    //     setServerMessage(result.message)\n    //     router.push(`/${firstname}_${lastname}`)\n    //    })\n    //     .catch(err=>{\n    //         setServerMessage(err.message)\n    //     })\n    //     const result = response.json()\n    //     console.log(result)\n    //     await localStorage.setItem('token', result.data.token)\n    //     await localStorage.setItem('user', result.data.user)\n    //     setServerMessage(result.data.message)\n    //     router.push(`/:${user.name}`)\n    //   }catch(err){\n    //     setServerMessage(err.message)\n    //   }\n\n  }; // const get_single_route = (routeId) =>{\n  //     console.log(routeId)\n  //     let url = `https://backend.cruise9ja.com/api/v1/routes/${abuwala1}`\n  //     fetch(url)\n  //       .then(response => response.json())\n  //       .then(data => {\n  //           console.log(data)\n  //           setSingle_route([...data.result])\n  //           console.log(single_route)\n  //       })\n  //       .catch(err => {\n  //           setErrorMessage(err.message)\n  //         })\n  //     // const router = useRouter()\n  //     // router.push('/searchresults')\n  // }\n\n\n  const value = {\n    user,\n    sign_in,\n    sign_up,\n    serverMessage,\n    isLoading,\n    verify_user,\n    setIsLoading,\n    setServerMessage\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["/Users/oche/Projects/Targetometer/Client/context/AuthContext.js"],"names":["createContext","useContext","useState","router","useRouter","axios","AuthContextDefaultValues","user","AuthContext","BASE_URL","useAuth","AuthProvider","children","setUser","userInfo","setUserInfo","isLoading","setIsLoading","serverMessage","setServerMessage","sign_up","email","password","firstname","lastname","confirmpassword","response","fetch","method","headers","body","JSON","stringify","result","json","setTimeout","push","err","message","verify_user","otp","token","error","sign_in","localStorage","setItem","data","userID","getItem","value"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport router, {useRouter} from 'next/router'\nimport axios from \"axios\";\nconst AuthContextDefaultValues={\n    user:[],\n \n   \n}\n\nconst AuthContext = createContext(AuthContextDefaultValues)\n\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/auth'\nexport function useAuth(){\n    return useContext(AuthContext)\n}\n\nexport function AuthProvider({children}){\n    const [user, setUser] = useState([])\n    \n    const [userInfo, setUserInfo] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n    // const [single_route, setSingle_route] = useState([])\n    const [serverMessage, setServerMessage] = useState('')\n    const sign_up =  async(email, password, firstname, lastname, confirmpassword) =>{\n        if (password === confirmpassword){\n            try{\n                setIsLoading(true)\n                let response = await fetch(`${BASE_URL}/createaccount`, {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                                // 'Content-Type': 'application/x-www-form-urlencoded',\n                              },\n                            body: JSON.stringify({\n                                firstname: firstname,\n                                lastname: lastname,\n                                password: password,\n                                email:email, \n                                \n                            })\n                       })\n                       \n                    const result = await response.json()\n                    // console.log(result)\n                   \n                    setServerMessage(\"Account Created Successfully, please verify email\")\n                    setTimeout(()=>{\n                                router.push(`/verifyuser`)\n                           }, 30000)\n                           setIsLoading(false)\n            }catch(err){\n                setServerMessage(err.message)\n                setIsLoading(false)\n            }\n    \n        }else{\n            setServerMessage('password and confirm password does not match')\n        }\n        \n\n    //     fetch(`${BASE_URL}/createaccount`, {\n    //         method: 'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json'\n    //             // 'Content-Type': 'application/x-www-form-urlencoded',\n    //           },\n    //         body: JSON.stringify({\n    //             firstname: firstname,\n    //             lastname: lastname,\n    //             password: password,\n    //             email:email, \n                \n    //         })\n    //     })\n    //     .then(response => response.json())\n    //     .then(data => {\n           \n    //     setServerMessage(\"Account Created Successfully, please login to access dashboard\")\n    //     setTimeout(()=>{\n    //         router.push(`/`)\n    //     }, 30000)\n        \n    //    })\n    //     .catch(err=>{\n    //         setServerMessage(err.message)\n    //     })\n    }\n// verify account\n    const verify_user = async (otp) => {\n        try{\n           setIsLoading(true)\n           let response = await fetch(`${BASE_URL}/verifyaccount`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },\n            body: JSON.stringify({\n                \n                token: otp,\n               \n               \n           })\n        })\n        const result = await response.json()\n        setServerMessage('Email Verified Please Login')\n        setTimeout(()=>{\n            router.push(`/`)\n        }, 30000)\n        setIsLoading(false)\n        }catch(error){\n            setServerMessage(\"Error verifiying token\") \n           setIsLoading(false) \n           router.push(`/`)\n        }\n    }\n\n    const sign_in = async (email, password) =>{\n\n       try{\n        setIsLoading(true)\n            let response = await fetch(`${BASE_URL}/login`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                  },\n                body: JSON.stringify({\n                    \n                    password: password,\n                    email:email, \n                   \n               })\n            })\n            \n            const result = await response.json()\n            // console.log(result)\n           \n            localStorage.setItem('token', result.token)\n        \n            setUser(result.data)\n            localStorage.setItem('firstname', result.data.firstname )\n            localStorage.setItem('lastname',result.data.lastname)\n            localStorage.setItem('userID', result.data.userID)\n    \n            \n            const firstname = localStorage.getItem('firstname')\n            const lastname = localStorage.getItem('lastname')\n            \n            setServerMessage(result.message)\n            router.push(`/${firstname}_${lastname}`)\n       } catch(err){\n        setServerMessage(err.message) \n        setIsLoading(false)\n       }\n        \n        // fetch(`${BASE_URL}/login`, {\n        //     method: 'POST',\n        //     headers: {\n        //         'Content-Type': 'application/json'\n        //         // 'Content-Type': 'application/x-www-form-urlencoded',\n        //       },\n        //     body: JSON.stringify({\n                \n        //         password: password,\n        //         email:email, \n               \n        //     })\n        // })\n    //     .then(response => response.json())\n    //     .then(result => {\n        \n    //      localStorage.setItem('token', result.token)\n        \n    //     setUser(result.data)\n    //     localStorage.setItem('firstname', result.data.firstname )\n    //     localStorage.setItem('lastname',result.data.lastname)\n    //     localStorage.setItem('userID', result.data.userID)\n\n        \n    //     const firstname = localStorage.getItem('firstname')\n    //     const lastname = localStorage.getItem('lastname')\n        \n    //     setServerMessage(result.message)\n    //     router.push(`/${firstname}_${lastname}`)\n    //    })\n    //     .catch(err=>{\n    //         setServerMessage(err.message)\n    //     })\n        //     const result = response.json()\n        //     console.log(result)\n        //     await localStorage.setItem('token', result.data.token)\n        //     await localStorage.setItem('user', result.data.user)\n        //     setServerMessage(result.data.message)\n        //     router.push(`/:${user.name}`)\n        //   }catch(err){\n        //     setServerMessage(err.message)\n        //   }\n         \n    }\n\n    // const get_single_route = (routeId) =>{\n\n    //     console.log(routeId)\n\n    //     let url = `https://backend.cruise9ja.com/api/v1/routes/${abuwala1}`\n    //     fetch(url)\n    //       .then(response => response.json())\n    //       .then(data => {\n    //           console.log(data)\n    //           setSingle_route([...data.result])\n    //           console.log(single_route)\n    //       })\n    //       .catch(err => {\n    //           setErrorMessage(err.message)\n              \n    //         })\n    //     // const router = useRouter()\n    //     // router.push('/searchresults')\n    // }\n\n    const value = {\n        user,\n        sign_in,\n        sign_up,\n        serverMessage,\n       isLoading,\n        verify_user,\n        setIsLoading,\n        setServerMessage\n    }\n\n    return (\n        <>\n            <AuthContext.Provider value={value}>\n               {children}\n            </AuthContext.Provider>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}