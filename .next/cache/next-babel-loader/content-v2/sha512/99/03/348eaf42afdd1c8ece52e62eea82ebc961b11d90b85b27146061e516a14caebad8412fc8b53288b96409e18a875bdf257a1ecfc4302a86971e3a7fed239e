{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"/Users/oche/Projects/Targetometer/Client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/oche/Projects/Targetometer/Client/context/TaskContext.js\",\n    _s = $RefreshSig$(),\n    _this = this,\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { GiToken } from \"react-icons/gi\";\nimport { useAuth } from \"./AuthContext\";\nvar TaskContextDefaultValues = /*#__PURE__*/createContext({\n  tasks: [],\n  singleTask: []\n});\nvar TaskContext = /*#__PURE__*/createContext(TaskContextDefaultValues);\n_c = TaskContext;\nvar BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/users';\nexport function useTask() {\n  _s();\n\n  return useContext(TaskContext);\n}\n\n_s(useTask, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport var TaskProvider = function TaskProvider(_ref) {\n  _s2();\n\n  var children = _ref.children;\n\n  var _useAuth = useAuth(),\n      user = _useAuth.user;\n\n  var _useState = useState([]),\n      tasks = _useState[0],\n      setTask = _useState[1];\n\n  var _useState2 = useState([]),\n      singleTask = _useState2[0],\n      setSingleTask = _useState2[1];\n\n  var _useState3 = useState(''),\n      taskServerMessage = _useState3[0],\n      settaskServerMessage = _useState3[1];\n\n  var get_all_tasks = function get_all_tasks() {\n    var userID = localStorage.getItem('userID');\n    var token = localStorage.getItem('token');\n    var projectID = localStorage.getItem('selectedProjectID');\n    console.log(\"\".concat(BASE_URL, \"/\").concat(userID, \"/projects/\").concat(projectID, \"/tasks\"));\n    fetch(\"\".concat(BASE_URL, \"/\").concat(userID, \"/projects/\").concat(projectID, \"/tasks\"), {\n      method: 'GET',\n      headers: {\n        // 'Content-Type': 'application/json',\n        'Authorization': \"Bearer \".concat(token) // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (result) {\n      console.log(result.result);\n      setTask(_toConsumableArray(result.result));\n    })[\"catch\"](function (error) {\n      settaskServerMessage(error.message);\n    });\n  };\n\n  var get_single_task = function get_single_task(taskID) {\n    var projectID = localStorage.getItem('selectedProjectID');\n    var userID = localStorage.getItem('userID');\n    var token = localStorage.getItem('token');\n    fetch(\"\".concat(BASE_URL, \"/\").concat(userID, \"/projects/\").concat(projectID, \"/tasks/\").concat(taskID), {\n      method: 'GET',\n      headers: {\n        // 'Content-Type': 'application/json',\n        'Authorization': \"Bearer \".concat(token) // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (result) {\n      console.log(result);\n      setTask(_toConsumableArray(result.result));\n    })[\"catch\"](function (error) {\n      settaskServerMessage(error.message);\n    });\n  };\n\n  var create_single_task = function create_single_task(title, description, startdate, enddate) {\n    var token = localStorage.getItem('token');\n    var projectID = localStorage.getItem('selectedProjectID');\n    var userID = localStorage.getItem('userID');\n    fetch(\"\".concat(BASE_URL, \"/\").concat(userID, \"/projects/\").concat(projectID, \"/tasks/\"), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \".concat(token) // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify({\n        title: title,\n        description: description,\n        startdate: startdate,\n        enddate: enddate\n      })\n    }).then(function () {\n      settaskServerMessage(\"Task Created Successfully\");\n      location.reload(true);\n    })[\"catch\"](function (error) {\n      settaskServerMessage(error.message);\n    });\n  };\n\n  var set_task_to_working = function set_task_to_working() {\n    var token = localStorage.getItem('token');\n    var userID = localStorage.getItem('userID');\n    var projectID = localStorage.getItem('selectedProjectID');\n    fetch(\"\".concat(BASE_URL, \"/\").concat(userID, \"/projects/\").concat(projectID, \"/tasks/\").concat(taskID), {\n      method: 'PUT',\n      // mode: \"no-cors\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \".concat(token) // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify({})\n    }).then(function (response) {\n      return response.json();\n    }).then(function (result) {\n      settaskServerMessage(result.message);\n      location.reload(true);\n    })[\"catch\"](function (error) {\n      settaskServerMessage(error.message);\n    });\n  };\n\n  var set_task_to_completed = function set_task_to_completed() {\n    var token = localStorage.getItem('token');\n    var userID = localStorage.getItem('userID');\n    var projectID = localStorage.getItem('selectedProjectID');\n    fetch(\"\".concat(BASE_URL, \"/\").concat(userID, \"/projects/\").concat(projectID, \"/tasks/\").concat(taskID), {\n      method: 'PUT',\n      // mode: \"no-cors\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \".concat(token) // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify({})\n    }).then(function (response) {\n      return response.json();\n    }).then(function (result) {\n      settaskServerMessage(result.message);\n      location.reload(true);\n    })[\"catch\"](function (error) {\n      settaskServerMessage(error.message);\n    });\n  };\n\n  var value = {\n    tasks: tasks,\n    singleTask: singleTask,\n    taskServerMessage: taskServerMessage,\n    get_all_tasks: get_all_tasks,\n    get_single_task: get_single_task,\n    create_single_task: create_single_task,\n    set_task_to_completed: set_task_to_completed,\n    set_task_to_working: set_task_to_working,\n    settaskServerMessage: settaskServerMessage\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, _this);\n};\n\n_s2(TaskProvider, \"hkmkfQKIJTdGzAmMDWOwxvUpEGg=\", false, function () {\n  return [useAuth];\n});\n\n_c2 = TaskProvider;\nexport default TaskContext;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskContext\");\n$RefreshReg$(_c2, \"TaskProvider\");","map":{"version":3,"sources":["/Users/oche/Projects/Targetometer/Client/context/TaskContext.js"],"names":["createContext","useContext","useState","GiToken","useAuth","TaskContextDefaultValues","tasks","singleTask","TaskContext","BASE_URL","useTask","TaskProvider","children","user","setTask","setSingleTask","taskServerMessage","settaskServerMessage","get_all_tasks","userID","localStorage","getItem","token","projectID","console","log","fetch","method","headers","then","response","json","result","error","message","get_single_task","taskID","create_single_task","title","description","startdate","enddate","body","JSON","stringify","location","reload","set_task_to_working","set_task_to_completed","value"],"mappings":"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","sourcesContent":["import {  createContext, useContext, useState } from \"react\";\nimport { GiToken } from \"react-icons/gi\";\nimport { useAuth } from \"./AuthContext\";\n\nconst TaskContextDefaultValues = createContext({\n    tasks: [],\n    singleTask: [],\n   \n})\n\nconst TaskContext = createContext(TaskContextDefaultValues)\n\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/users'\n\nexport function useTask(){\n    return useContext(TaskContext)\n}\n\nexport const TaskProvider = ({children}) =>{\n    const {user} = useAuth()\n    const [tasks, setTask] = useState([])\n    const [singleTask, setSingleTask] = useState([])\n    const [taskServerMessage, settaskServerMessage] = useState('')\n\n    const get_all_tasks = () =>{\n        const userID = localStorage.getItem('userID')\n        const token = localStorage.getItem('token')\n        const projectID = localStorage.getItem('selectedProjectID')\n        console.log(`${BASE_URL}/${userID}/projects/${projectID}/tasks` )\n        fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks`, {\n            method: 'GET',\n            headers: {\n                // 'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n               // 'Content-Type': 'application/x-www-form-urlencoded',\n              }\n        })\n        .then(response=>response.json())\n        .then(result => {\n            console.log(result.result)\n            setTask([...result.result])\n        })\n        .catch(error => {\n            settaskServerMessage(error.message)\n        })\n    }\n\n    const get_single_task =( taskID)=>{\n        const projectID = localStorage.getItem('selectedProjectID')\n        const userID = localStorage.getItem('userID')\n        const token = localStorage.getItem('token')\n       fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/${taskID}`, {\n            method: 'GET',\n            headers: {\n                // 'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n               // 'Content-Type': 'application/x-www-form-urlencoded',\n              }\n        })\n        .then((response)=>response.json())\n        .then(result => {\n            console.log(result)\n            setTask([...result.result])\n       })\n        .catch(error => {\n            settaskServerMessage(error.message)\n        })\n    }\n\n    const create_single_task = ( title, description, startdate, enddate) =>{\n        const token = localStorage.getItem('token')\n        const projectID = localStorage.getItem('selectedProjectID')\n        const userID = localStorage.getItem('userID')\n     \n        fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n             },\n            body: JSON.stringify({\n                \n                title: title,\n                description:description, \n                startdate: startdate,\n                enddate: enddate\n            })\n        })\n        .then(()=>{\n            settaskServerMessage(\"Task Created Successfully\")\n            location.reload(true);\n        })\n        .catch(error => {\n            settaskServerMessage(error.message)\n        })\n    }\n\n    const set_task_to_working =()=>{\n        const token = localStorage.getItem('token')\n        const userID = localStorage.getItem('userID')\n        const projectID = localStorage.getItem('selectedProjectID')\n        fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/${taskID}`, {\n            method: 'PUT',\n            // mode: \"no-cors\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },\n            body: JSON.stringify({\n                \n               \n            })\n        })\n        .then(response => response.json())\n        .then((result)=>{\n            settaskServerMessage(result.message)\n            location.reload(true);\n        })\n        .catch(error => {\n            settaskServerMessage(error.message)\n        })\n    }\n\n    const set_task_to_completed = () => {\n        const token = localStorage.getItem('token')\n        const userID = localStorage.getItem('userID')\n        const projectID = localStorage.getItem('selectedProjectID')\n        fetch(`${BASE_URL}/${userID}/projects/${projectID}/tasks/${taskID}`, {\n            method: 'PUT',\n            // mode: \"no-cors\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },\n            body: JSON.stringify({\n                \n              \n            })\n        })\n        .then(response => response.json())\n        .then((result)=>{\n            settaskServerMessage(result.message)\n            location.reload(true);\n        })\n        .catch(error => {\n            settaskServerMessage(error.message)\n        })\n    }\n\n    const value = {\n        tasks,\n        singleTask,\n        taskServerMessage,\n        get_all_tasks,\n        get_single_task,\n        create_single_task,\n        set_task_to_completed,\n        set_task_to_working,\n        settaskServerMessage\n    }\n\n    return (\n        <TaskContext.Provider value={value}>\n            {children}\n        </TaskContext.Provider>\n    )\n}\n\nexport default TaskContext"]},"metadata":{},"sourceType":"module"}