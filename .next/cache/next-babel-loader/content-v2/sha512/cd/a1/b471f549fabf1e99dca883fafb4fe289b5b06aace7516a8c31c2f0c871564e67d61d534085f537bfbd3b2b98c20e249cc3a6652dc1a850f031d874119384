{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/oche/Projects/Targetometer/Client/context/AuthContext.js\";\nimport { createContext, useContext, useState } from \"react\";\nimport router, { useRouter } from 'next/router';\nimport axios from \"axios\";\nconst AuthContextDefaultValues = {\n  user: []\n};\nconst AuthContext = /*#__PURE__*/createContext(AuthContextDefaultValues);\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/auth';\nconst USER_URL = 'https://targetometer-server.herokuapp.com/api/v1/users';\nexport function useAuth() {\n  return useContext(AuthContext);\n}\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState([]);\n  const {\n    0: userInfo,\n    1: setUserInfo\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false); // const [single_route, setSingle_route] = useState([])\n\n  const {\n    0: serverMessage,\n    1: setServerMessage\n  } = useState('');\n\n  const sign_up = async (email, password, firstname, lastname, confirmpassword) => {\n    try {\n      setIsLoading(true);\n      let response = await fetch(`${BASE_URL}/createaccount`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        body: JSON.stringify({\n          firstname: firstname,\n          lastname: lastname,\n          password: password,\n          email: email\n        })\n      });\n      const result = await response.json(); // console.log(result)\n\n      setServerMessage(\"Account Created Successfully, please verify email\");\n      router.push(`/verifyuser`);\n    } catch (err) {\n      setServerMessage(\"Welcome\");\n      setIsLoading(false);\n      console.log(err.message);\n    } //     fetch(`${BASE_URL}/createaccount`, {\n    //         method: 'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json'\n    //             // 'Content-Type': 'application/x-www-form-urlencoded',\n    //           },\n    //         body: JSON.stringify({\n    //             firstname: firstname,\n    //             lastname: lastname,\n    //             password: password,\n    //             email:email, \n    //         })\n    //     })\n    //     .then(response => response.json())\n    //     .then(data => {\n    //     setServerMessage(\"Account Created Successfully, please login to access dashboard\")\n    //     setTimeout(()=>{\n    //         router.push(`/`)\n    //     }, 30000)\n    //    })\n    //     .catch(err=>{\n    //         setServerMessage(err.message)\n    //    })\n\n  }; // verify account\n\n\n  const verify_user = async otp => {\n    setServerMessage(\"Email has been verified please login\");\n    router.push('/'); // try{\n    //    setIsLoading(true)\n    //    let response = await fetch(`${BASE_URL}/verifyaccount`, {\n    //     method: 'PUT',\n    //     headers: {\n    //         'Content-Type': 'application/json'\n    //         // 'Content-Type': 'application/x-www-form-urlencoded',\n    //       },\n    //     body: JSON.stringify({\n    //         token: otp,\n    //    })\n    // })\n    // setServerMessage('Email Verified Please Login')\n    //     router.push(`/`)\n    // }catch(error){\n    //     console.log(error.message)\n    //     setServerMessage(\"Error verifiying token\") \n    //    setIsLoading(false) \n    // }\n  };\n\n  const sign_in = async (email, password) => {\n    try {\n      setIsLoading(true);\n      let response = await fetch(`${BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        body: JSON.stringify({\n          password: password,\n          email: email\n        })\n      });\n      const result = await response.json(); // console.log(result)\n\n      localStorage.setItem('token', result.token);\n      setUser(result.data);\n      localStorage.setItem('userinfo', JSON.stringify(result.data));\n      localStorage.setItem('firstname', result.data.firstname);\n      localStorage.setItem('lastname', result.data.lastname);\n      localStorage.setItem('userID', result.data.userID);\n      const firstname = localStorage.getItem('firstname');\n      const lastname = localStorage.getItem('lastname');\n      setServerMessage(result.message);\n      router.push(`/${firstname}_${lastname}`);\n    } catch (err) {\n      setServerMessage('error signing in');\n      setIsLoading(false);\n      setServerMessage(err.message);\n    }\n  };\n\n  const get_user = () => {\n    // console \n    const userID = localStorage.getItem('userID');\n    const token = localStorage.getItem('token');\n    fetch(`${USER_URL}/${userID}/`, {\n      method: 'GET',\n      headers: {\n        // 'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      }\n    }).then(response => response.json()).then(result => {\n      console.log(result.result);\n      setUser([...result.result]);\n    }).catch(error => {\n      console.log(error.message);\n      setServerMessage('');\n    });\n  };\n\n  const delete_user = () => {\n    const userID = localStorage.getItem('userID');\n    const token = localStorage.getItem('token');\n    fetch(`${USER_URL}/${userID}/`, {\n      method: 'DELETE',\n      headers: {\n        // 'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      }\n    }).then(response => response.json()).then(result => {\n      setServerMessage(\"user deleted\");\n    }).catch(error => {\n      setServerMessage(\"user deleted\");\n    });\n  };\n\n  const update_user = (profileimage, address, email, contact, occupation, password) => {\n    const userID = localStorage.getItem('userID');\n    const token = localStorage.getItem('token');\n    fetch(`${USER_URL}/${userID}/`, {\n      method: 'PUT',\n      // mode: \"no-cors\",\n      headers: {\n        // 'Content-Type': 'application/json',\n        'Content-Type': 'multipart/form-data',\n        'Authorization': `Bearer ${token}` // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: {\n        email: email,\n        profileimage: profileimage,\n        address: address,\n        contact: contact,\n        occupation: occupation,\n        password: password\n      }\n    }) // .then(response => response.json())\n    .then(result => {\n      setServerMessage(\"user profile updated\");\n      console.log(result.result);\n      console.log(\"user profile updated\");\n    }).catch(error => {\n      console.log(error.message);\n      setServerMessage('error updating user profile, please try again');\n    });\n  };\n\n  const value = {\n    user,\n    sign_in,\n    sign_up,\n    serverMessage,\n    isLoading,\n    verify_user,\n    setIsLoading,\n    setServerMessage,\n    get_user,\n    update_user,\n    delete_user // delete_user,\n\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["/Users/oche/Projects/Targetometer/Client/context/AuthContext.js"],"names":["createContext","useContext","useState","router","useRouter","axios","AuthContextDefaultValues","user","AuthContext","BASE_URL","USER_URL","useAuth","AuthProvider","children","setUser","userInfo","setUserInfo","isLoading","setIsLoading","serverMessage","setServerMessage","sign_up","email","password","firstname","lastname","confirmpassword","response","fetch","method","headers","body","JSON","stringify","result","json","push","err","console","log","message","verify_user","otp","sign_in","localStorage","setItem","token","data","userID","getItem","get_user","then","catch","error","delete_user","update_user","profileimage","address","contact","occupation","value"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport router, {useRouter} from 'next/router'\nimport axios from \"axios\";\nconst AuthContextDefaultValues={\n    user:[],\n \n   \n}\n\nconst AuthContext = createContext(AuthContextDefaultValues)\n\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/auth'\nconst USER_URL = 'https://targetometer-server.herokuapp.com/api/v1/users'\nexport function useAuth(){\n    return useContext(AuthContext)\n}\n\nexport function AuthProvider({children}){\n    const [user, setUser] = useState([])\n    \n    const [userInfo, setUserInfo] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n    // const [single_route, setSingle_route] = useState([])\n    const [serverMessage, setServerMessage] = useState('')\n    const sign_up =  async(email, password, firstname, lastname, confirmpassword) =>{\n       \n            try{\n                \n                setIsLoading(true)\n                let response = await fetch(`${BASE_URL}/createaccount`, {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                                // 'Content-Type': 'application/x-www-form-urlencoded',\n                              },\n                            body: JSON.stringify({\n                                firstname: firstname,\n                                lastname: lastname,\n                                password: password,\n                                email:email, \n                                \n                            })\n                       })\n                       \n                    const result = await response.json()\n                    // console.log(result)\n                   \n                    setServerMessage(\"Account Created Successfully, please verify email\")\n                    \n                                router.push(`/verifyuser`)\n                        \n                          \n            }catch(err){\n                setServerMessage(\"Welcome\")\n                setIsLoading(false)\n                console.log(err.message)\n            }\n        \n          \n        \n        \n\n    //     fetch(`${BASE_URL}/createaccount`, {\n    //         method: 'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json'\n    //             // 'Content-Type': 'application/x-www-form-urlencoded',\n    //           },\n    //         body: JSON.stringify({\n    //             firstname: firstname,\n    //             lastname: lastname,\n    //             password: password,\n    //             email:email, \n                \n    //         })\n    //     })\n    //     .then(response => response.json())\n    //     .then(data => {\n           \n    //     setServerMessage(\"Account Created Successfully, please login to access dashboard\")\n    //     setTimeout(()=>{\n    //         router.push(`/`)\n    //     }, 30000)\n        \n    //    })\n    //     .catch(err=>{\n    //         setServerMessage(err.message)\n    //    })\n    }\n// verify account\n    const verify_user = async (otp) => {\n        setServerMessage(\"Email has been verified please login\")\n        router.push('/')\n        // try{\n        //    setIsLoading(true)\n        //    let response = await fetch(`${BASE_URL}/verifyaccount`, {\n        //     method: 'PUT',\n        //     headers: {\n        //         'Content-Type': 'application/json'\n        //         // 'Content-Type': 'application/x-www-form-urlencoded',\n        //       },\n        //     body: JSON.stringify({\n                \n        //         token: otp,\n               \n               \n        //    })\n        // })\n        \n        // setServerMessage('Email Verified Please Login')\n        \n        //     router.push(`/`)\n       \n        \n        // }catch(error){\n        //     console.log(error.message)\n        //     setServerMessage(\"Error verifiying token\") \n        //    setIsLoading(false) \n           \n        // }\n    }\n\n    const sign_in = async (email, password) =>{\n\n       try{\n        setIsLoading(true)\n            let response = await fetch(`${BASE_URL}/login`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                  },\n                body: JSON.stringify({\n                    \n                    password: password,\n                    email:email, \n                   \n               })\n            })\n            \n            const result = await response.json()\n            // console.log(result)\n           \n            localStorage.setItem('token', result.token)\n        \n            setUser(result.data)\n           localStorage.setItem('userinfo', JSON.stringify(result.data))\n        \n            localStorage.setItem('firstname', result.data.firstname )\n            localStorage.setItem('lastname',result.data.lastname)\n            localStorage.setItem('userID', result.data.userID)\n    \n            \n            const firstname = localStorage.getItem('firstname')\n            const lastname = localStorage.getItem('lastname')\n            \n            setServerMessage(result.message)\n            router.push(`/${firstname}_${lastname}`)\n       } catch(err){\n           setServerMessage('error signing in')\n        \n        setIsLoading(false)\n        setServerMessage(err.message) \n       }\n    }\n\n    const get_user = ()=>{\n        // console \n        const userID = localStorage.getItem('userID')\n        const token = localStorage.getItem('token')\n        \n        fetch(`${USER_URL}/${userID}/`, {\n            method: 'GET',\n            headers: {\n                // 'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n               // 'Content-Type': 'application/x-www-form-urlencoded',\n              }\n        })\n        .then(response=>response.json())\n        .then(result => {\n            console.log(result.result)\n            setUser([...result.result])\n           \n        })\n        .catch(error => {\n            console.log(error.message)\n            setServerMessage('')\n    })\n}\nconst delete_user = ()=>{\n    const userID = localStorage.getItem('userID')\n    const token = localStorage.getItem('token')\n    \n    fetch(`${USER_URL}/${userID}/`, {\n        method: 'DELETE',\n        headers: {\n            // 'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n           // 'Content-Type': 'application/x-www-form-urlencoded',\n          }\n    })\n    .then(response=>response.json())\n    .then(result => {\n       setServerMessage(\"user deleted\")\n    })\n    .catch(error => {\n        setServerMessage(\"user deleted\")\n})\n}\n\nconst update_user = (profileimage, address,email, contact, occupation, password) =>{\n    const userID = localStorage.getItem('userID')\n    const token = localStorage.getItem('token')\n    \n    fetch(`${USER_URL}/${userID}/`, {\n        method: 'PUT',\n        // mode: \"no-cors\",\n        headers: {\n            // 'Content-Type': 'application/json',\n            'Content-Type':'multipart/form-data',\n            'Authorization': `Bearer ${token}`,\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        body: {\n            email: email,\n            profileimage: profileimage,\n            address:address, \n            contact: contact,\n            occupation: occupation,\n            password: password\n        }\n    })\n    // .then(response => response.json())\n    .then((result)=>{\n        setServerMessage(\"user profile updated\")\n        console.log(result.result)\n        console.log(\"user profile updated\")\n    })\n    .catch(error => {\n        console.log(error.message)\n        setServerMessage('error updating user profile, please try again')\n    })\n}\n\n\n\n  \n\n    const value = {\n        user,\n        sign_in,\n        sign_up,\n        serverMessage,\n       isLoading,\n        verify_user,\n        setIsLoading,\n        setServerMessage,\n        get_user,\n        update_user,\n        delete_user\n        // delete_user,\n    }\n\n    return (\n        <>\n            <AuthContext.Provider value={value}>\n               {children}\n            </AuthContext.Provider>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}