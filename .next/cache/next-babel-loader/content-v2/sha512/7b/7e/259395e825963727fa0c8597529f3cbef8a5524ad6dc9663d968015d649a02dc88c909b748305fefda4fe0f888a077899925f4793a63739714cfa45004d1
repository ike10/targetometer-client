{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/oche/Projects/Targetometer/Client/context/TaskContext.js\";\nimport { createContext, useContext, useState } from \"react\";\nimport { GiToken } from \"react-icons/gi\";\nimport { useAuth } from \"./AuthContext\";\nconst TaskContextDefaultValues = /*#__PURE__*/createContext({\n  tasks: [],\n  singleTask: []\n});\nconst TaskContext = /*#__PURE__*/createContext(TaskContextDefaultValues);\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/users';\nexport function useTask() {\n  return useContext(TaskContext);\n}\nexport const TaskProvider = ({\n  children\n}) => {\n  const {\n    user\n  } = useAuth();\n  const {\n    0: tasks,\n    1: setTask\n  } = useState([]);\n  const {\n    0: singleTask,\n    1: setSingleTask\n  } = useState([]);\n  const {\n    0: serverMessage,\n    1: setServerMessage\n  } = useState('');\n\n  const get_all_tasks = projectID => {\n    const token = localStorage.getItem('token');\n    console.log(`${BASE_URL}/${user.userID}/projects/${projectID}/tasks`);\n    fetch(`${BASE_URL}/${user.userID}/projects/${projectID}/tasks`, {\n      method: 'GET',\n      headers: {\n        // 'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      }\n    }).then(response => {\n      response.json();\n    }).then(result => {\n      console.log(result.result);\n      setTask([...result.result]);\n    }).catch(error => {\n      setServerMessage(error.message);\n    });\n  };\n\n  const get_single_task = (projectID, taskID) => {\n    const token = localStorage.getItem('token');\n    fetch(`${BASE_URL}/${user.userID}/projects/${projectID}/tasks/${taskID}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      }\n    }).then(response => {\n      response.json();\n    }).then(result => {\n      console.log(result);\n      setTask([...result.result]);\n    }).catch(error => {\n      setServerMessage(error.message);\n    });\n  };\n\n  const create_single_task = (projectID, title, description, startdate, enddate) => {\n    const token = localStorage.getItem('token');\n    fetch(`${BASE_URL}/${user.userID}/projects/${projectID}/tasks/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify({\n        title: title,\n        description: description,\n        startdate: startdate,\n        enddate: enddate\n      })\n    }).then(() => {\n      setServerMessage(\"Task Created Succedfully\");\n    }).catch(error => {\n      setServerMessage(error.message);\n    });\n  };\n\n  const value = {\n    tasks,\n    singleTask,\n    serverMessage,\n    get_all_tasks,\n    get_single_task,\n    create_single_task\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\nexport default TaskContext;","map":{"version":3,"sources":["/Users/oche/Projects/Targetometer/Client/context/TaskContext.js"],"names":["createContext","useContext","useState","GiToken","useAuth","TaskContextDefaultValues","tasks","singleTask","TaskContext","BASE_URL","useTask","TaskProvider","children","user","setTask","setSingleTask","serverMessage","setServerMessage","get_all_tasks","projectID","token","localStorage","getItem","console","log","userID","fetch","method","headers","then","response","json","result","catch","error","message","get_single_task","taskID","create_single_task","title","description","startdate","enddate","body","JSON","stringify","value"],"mappings":"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","sourcesContent":["import {  createContext, useContext, useState } from \"react\";\nimport { GiToken } from \"react-icons/gi\";\nimport { useAuth } from \"./AuthContext\";\n\nconst TaskContextDefaultValues = createContext({\n    tasks: [],\n    singleTask: [],\n   \n})\n\nconst TaskContext = createContext(TaskContextDefaultValues)\n\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/users'\n\nexport function useTask(){\n    return useContext(TaskContext)\n}\n\nexport const TaskProvider = ({children}) =>{\n    const {user} = useAuth()\n    const [tasks, setTask] = useState([])\n    const [singleTask, setSingleTask] = useState([])\n    const [serverMessage, setServerMessage] = useState('')\n\n    const get_all_tasks = (projectID) =>{\n        const token = localStorage.getItem('token')\n        console.log(`${BASE_URL}/${user.userID}/projects/${projectID}/tasks` )\n        fetch(`${BASE_URL}/${user.userID}/projects/${projectID}/tasks`, {\n            method: 'GET',\n            headers: {\n                // 'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n               // 'Content-Type': 'application/x-www-form-urlencoded',\n              }\n        })\n        .then((response)=>{response.json()})\n        .then(result => {\n            console.log(result.result)\n            setTask([...result.result])\n        })\n        .catch(error => {\n            setServerMessage(error.message)\n        })\n    }\n\n    const get_single_task =(projectID, taskID)=>{\n        const token = localStorage.getItem('token')\n        fetch(`${BASE_URL}/${user.userID}/projects/${projectID}/tasks/${taskID}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n               // 'Content-Type': 'application/x-www-form-urlencoded',\n              }\n        })\n        .then((response)=>{response.json()})\n        .then(result => {\n            console.log(result)\n            setTask([...result.result])\n       })\n        .catch(error => {\n            setServerMessage(error.message)\n        })\n    }\n\n    const create_single_task = (projectID, title, description, startdate, enddate) =>{\n        const token = localStorage.getItem('token')\n        \n        fetch(`${BASE_URL}/${user.userID}/projects/${projectID}/tasks/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },\n            body: JSON.stringify({\n                \n                title: title,\n                description:description, \n                startdate: startdate,\n                enddate: enddate\n            })\n        })\n        .then(()=>{\n            setServerMessage(\"Task Created Succedfully\")\n        })\n        .catch(error => {\n            setServerMessage(error.message)\n        })\n    }\n\n    const value = {\n        tasks,\n        singleTask,\n        serverMessage,\n        get_all_tasks,\n        get_single_task,\n        create_single_task\n    }\n\n    return (\n        <TaskContext.Provider value={value}>\n            {children}\n        </TaskContext.Provider>\n    )\n}\n\nexport default TaskContext"]},"metadata":{},"sourceType":"module"}