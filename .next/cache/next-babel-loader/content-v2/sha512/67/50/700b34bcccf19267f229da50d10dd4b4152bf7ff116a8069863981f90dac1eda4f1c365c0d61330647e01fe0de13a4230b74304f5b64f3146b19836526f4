{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/oche/Projects/Targetometer/Client/pages/components/puzzlecomponent.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport originalImage from './images/ny_original.jpg'; // import './App.css';\n// import '../../styles/app.css'\n\nclass Jigsaw extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      pieces: [],\n      shuffled: [],\n      solved: []\n    });\n  }\n\n  componentDidMount() {\n    const pieces = [...Array(40)].map((_, i) => ({\n      img: `ny_${('0' + (i + 1)).substr(-2)}.jpg`,\n      order: i,\n      board: 'shuffled'\n    }));\n    this.setState({\n      pieces,\n      shuffled: this.shufflePieces(pieces),\n      solved: [...Array(40)]\n    });\n  }\n\n  handleDrop(e, index, targetName) {\n    let target = this.state[targetName];\n    if (target[index]) return;\n    const pieceOrder = e.dataTransfer.getData('text');\n    const pieceData = this.state.pieces.find(p => p.order === +pieceOrder);\n    const origin = this.state[pieceData.board];\n    if (targetName === pieceData.board) target = origin;\n    origin[origin.indexOf(pieceData)] = undefined;\n    target[index] = pieceData;\n    pieceData.board = targetName;\n    this.setState({\n      [pieceData.board]: origin,\n      [targetName]: target\n    });\n  }\n\n  handleDragStart(e, order) {\n    const dt = e.dataTransfer;\n    dt.setData('text/plain', order);\n    dt.effectAllowed = 'move';\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jigsaw\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"jigsaw__shuffled-board\",\n        children: this.state.shuffled.map((piece, i) => this.renderPieceContainer(piece, i, 'shuffled'))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"jigsaw__solved-board\",\n        style: {\n          backgroundImage: `url(${originalImage})`\n        },\n        children: this.state.solved.map((piece, i) => this.renderPieceContainer(piece, i, 'solved'))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderPieceContainer(piece, index, boardName) {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      onDragOver: e => e.preventDefault(),\n      onDrop: e => this.handleDrop(e, index, boardName),\n      children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n        draggable: true,\n        onDragStart: e => this.handleDragStart(e, piece.order),\n        src: '/school-logo.png'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 20\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n  shufflePieces(pieces) {\n    const shuffled = [...pieces];\n\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let tmp = shuffled[i];\n      shuffled[i] = shuffled[j];\n      shuffled[j] = tmp;\n    }\n\n    return shuffled;\n  }\n\n}\n\nexport default Jigsaw; // ReactDOM.render(<Jigsaw />, document.querySelector('#app-root'));","map":{"version":3,"sources":["/Users/oche/Projects/Targetometer/Client/pages/components/puzzlecomponent.js"],"names":["React","Component","ReactDOM","originalImage","Jigsaw","pieces","shuffled","solved","componentDidMount","Array","map","_","i","img","substr","order","board","setState","shufflePieces","handleDrop","e","index","targetName","target","state","pieceOrder","dataTransfer","getData","pieceData","find","p","origin","indexOf","undefined","handleDragStart","dt","setData","effectAllowed","render","piece","renderPieceContainer","backgroundImage","boardName","preventDefault","length","j","Math","floor","random","tmp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport originalImage from './images/ny_original.jpg';\n// import './App.css';\n// import '../../styles/app.css'\nclass Jigsaw extends Component {\n  state = {\n    pieces: [],\n    shuffled: [],\n    solved: []\n  };\n\n  componentDidMount() {\n    const pieces = [...Array(40)]\n      .map((_, i) => (\n        {\n          img: `ny_${('0' + (i + 1)).substr(-2)}.jpg`,\n          order: i,\n          board: 'shuffled'\n        }\n      ));\n\n    this.setState({\n      pieces,\n      shuffled: this.shufflePieces(pieces),\n      solved: [...Array(40)]\n    });\n  }\n\n  handleDrop(e, index, targetName) {\n    let target = this.state[targetName];\n    if (target[index]) return;\n\n    const pieceOrder = e.dataTransfer.getData('text');\n    const pieceData = this.state.pieces.find(p => p.order === +pieceOrder);\n    const origin = this.state[pieceData.board];\n\n    if (targetName === pieceData.board) target = origin;\n    origin[origin.indexOf(pieceData)] = undefined;\n    target[index] = pieceData;\n    pieceData.board = targetName;\n\n    this.setState({ [pieceData.board]: origin, [targetName]: target })\n  }\n\n  handleDragStart(e, order) {\n    const dt = e.dataTransfer;\n    dt.setData('text/plain', order);\n    dt.effectAllowed = 'move';\n  }\n\n  render() {\n    return (\n      <div className=\"jigsaw\">\n        <ul className=\"jigsaw__shuffled-board\">\n          {this.state.shuffled.map((piece, i) => this.renderPieceContainer(piece, i, 'shuffled'))}\n        </ul>\n        <ol className=\"jigsaw__solved-board\" style={{ backgroundImage: `url(${originalImage})` }}>\n          {this.state.solved.map((piece, i) => this.renderPieceContainer(piece, i, 'solved'))}\n        </ol>\n      </div>\n    );\n  }\n\n  renderPieceContainer(piece, index, boardName) {\n    return (\n      <li\n        key={index}\n        onDragOver={(e) => e.preventDefault()}\n        onDrop={(e) => this.handleDrop(e, index, boardName)}>\n        {\n          piece && <img\n            draggable\n            onDragStart={(e) => this.handleDragStart(e, piece.order)}\n            src={'/school-logo.png'} />\n        }\n      </li>\n    );\n  }\n\n  shufflePieces(pieces) {\n    const shuffled = [...pieces];\n\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let tmp = shuffled[i];\n      shuffled[i] = shuffled[j];\n      shuffled[j] = tmp;\n    }\n\n    return shuffled;\n  }\n}\n\nexport default Jigsaw\n// ReactDOM.render(<Jigsaw />, document.querySelector('#app-root'));"]},"metadata":{},"sourceType":"module"}