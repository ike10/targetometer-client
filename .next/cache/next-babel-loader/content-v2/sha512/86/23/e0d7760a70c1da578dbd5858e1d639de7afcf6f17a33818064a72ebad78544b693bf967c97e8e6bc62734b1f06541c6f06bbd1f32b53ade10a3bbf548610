{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/oche/Projects/Targetometer/Client/context/AuthContext.js\";\nimport { createContext, useContext, useState } from \"react\";\nimport router, { useRouter } from 'next/router';\nimport axios from \"axios\";\nconst AuthContextDefaultValues = {\n  user: []\n};\nconst AuthContext = /*#__PURE__*/createContext(AuthContextDefaultValues);\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/auth';\nexport function useAuth() {\n  return useContext(AuthContext);\n}\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState([]); // const [single_route, setSingle_route] = useState([])\n\n  const {\n    0: serverMessage,\n    1: setServerMessage\n  } = useState('');\n\n  const sign_up = (email, password, firstname, lastname, confirmpassword) => {\n    fetch(`${BASE_URL}/createaccount`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify({\n        firstname: firstname,\n        lastname: lastname,\n        password: password,\n        email: email\n      })\n    }).then(response => response.json()).then(data => {\n      setServerMessage(\"Account Created successfully, please login to access dashboard\");\n      setTimeout(() => {\n        router.push(`/`);\n      }, 30000);\n    }).catch(err => {\n      setServerMessage(err.message);\n    });\n  };\n\n  const sign_in = (email, password) => {\n    fetch(`${BASE_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify({\n        password: password,\n        email: email\n      })\n    }).then(response => response.json()).then(result => {\n      console.log(result);\n      localStorage.setItem('token', result.token);\n      setUser(result.data);\n      setServerMessage(result.message);\n      router.push(`/${user.firstname}_${user.lastname}`);\n    }).catch(err => {\n      setServerMessage(err.message);\n    }); //     const result = response.json()\n    //     console.log(result)\n    //     await localStorage.setItem('token', result.data.token)\n    //     await localStorage.setItem('user', result.data.user)\n    //     setServerMessage(result.data.message)\n    //     router.push(`/:${user.name}`)\n    //   }catch(err){\n    //     setServerMessage(err.message)\n    //   }\n  }; // const get_single_route = (routeId) =>{\n  //     console.log(routeId)\n  //     let url = `https://backend.cruise9ja.com/api/v1/routes/${abuwala1}`\n  //     fetch(url)\n  //       .then(response => response.json())\n  //       .then(data => {\n  //           console.log(data)\n  //           setSingle_route([...data.result])\n  //           console.log(single_route)\n  //       })\n  //       .catch(err => {\n  //           setErrorMessage(err.message)\n  //         })\n  //     // const router = useRouter()\n  //     // router.push('/searchresults')\n  // }\n\n\n  const value = {\n    user,\n    sign_in,\n    sign_up,\n    serverMessage\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["/Users/oche/Projects/Targetometer/Client/context/AuthContext.js"],"names":["createContext","useContext","useState","router","useRouter","axios","AuthContextDefaultValues","user","AuthContext","BASE_URL","useAuth","AuthProvider","children","setUser","serverMessage","setServerMessage","sign_up","email","password","firstname","lastname","confirmpassword","fetch","method","headers","body","JSON","stringify","then","response","json","data","setTimeout","push","catch","err","message","sign_in","result","console","log","localStorage","setItem","token","value"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport router, {useRouter} from 'next/router'\nimport axios from \"axios\";\nconst AuthContextDefaultValues={\n    user:[],\n    \n}\n\nconst AuthContext = createContext(AuthContextDefaultValues)\n\nconst BASE_URL = 'https://targetometer-server.herokuapp.com/api/v1/auth'\nexport function useAuth(){\n    return useContext(AuthContext)\n}\n\nexport function AuthProvider({children}){\n    const [user, setUser] = useState([])\n    // const [single_route, setSingle_route] = useState([])\n    const [serverMessage, setServerMessage] = useState('')\n    const sign_up =  (email, password, firstname, lastname, confirmpassword) =>{\n\n\n\n\n        fetch(`${BASE_URL}/createaccount`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },\n            body: JSON.stringify({\n                firstname: firstname,\n                lastname: lastname,\n                password: password,\n                email:email, \n                \n            })\n        })\n        .then(response => response.json())\n        .then(data => {\n           \n        setServerMessage(\"Account Created successfully, please login to access dashboard\")\n        setTimeout(()=>{\n            router.push(`/`)\n        }, 30000)\n        \n       })\n        .catch(err=>{\n            setServerMessage(err.message)\n        })\n    }\n    const sign_in = (email, password) =>{\n        \n        fetch(`${BASE_URL}/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },\n            body: JSON.stringify({\n                \n                password: password,\n                email:email, \n                \n            })\n        })\n        .then(response => response.json())\n        .then(result => {\n           console.log(result)\n         localStorage.setItem('token', result.token)\n         \n        setUser(result.data)\n        setServerMessage(result.message)\n        router.push(`/${user.firstname}_${user.lastname}`)\n       })\n        .catch(err=>{\n            setServerMessage(err.message)\n        })\n        //     const result = response.json()\n        //     console.log(result)\n        //     await localStorage.setItem('token', result.data.token)\n        //     await localStorage.setItem('user', result.data.user)\n        //     setServerMessage(result.data.message)\n        //     router.push(`/:${user.name}`)\n        //   }catch(err){\n        //     setServerMessage(err.message)\n        //   }\n         \n    }\n\n    // const get_single_route = (routeId) =>{\n\n    //     console.log(routeId)\n\n    //     let url = `https://backend.cruise9ja.com/api/v1/routes/${abuwala1}`\n    //     fetch(url)\n    //       .then(response => response.json())\n    //       .then(data => {\n    //           console.log(data)\n    //           setSingle_route([...data.result])\n    //           console.log(single_route)\n    //       })\n    //       .catch(err => {\n    //           setErrorMessage(err.message)\n              \n    //         })\n    //     // const router = useRouter()\n    //     // router.push('/searchresults')\n    // }\n\n    const value = {\n        user,\n        sign_in,\n        sign_up,\n        serverMessage\n    }\n\n    return (\n        <>\n            <AuthContext.Provider value={value}>\n                {children}\n            </AuthContext.Provider>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}